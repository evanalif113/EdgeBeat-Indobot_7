#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include "SSD1306Wire.h" // Library SSD1306

MAX30105 particleSensor;
SSD1306Wire display(0x3c, 2, 3); // Initialize OLED display (I2C address, SDA, SCL)

#define MAX_BRIGHTNESS 255

uint32_t irBuffer[100];   // infrared LED sensor data
uint32_t redBuffer[100];  // red LED sensor data

int32_t bufferLength;     // data length
int32_t spo2;             // SPO2 value
int8_t validSPO2;         // indicator to show if the SPO2 calculation is valid
int32_t heartRate;        // heart rate value
int8_t validHeartRate;    // indicator to show if the heart rate calculation is valid

// Heart icon (love) in 16x16 format

const uint8_t heart_icon[] = {
  0b01110000, 0b00001110, // Row 1
  0b11111000, 0b00011111, // Row 2
  0b11111100, 0b00111111, // Row 3
  0b11111110, 0b01111111, // Row 4
  0b11111110, 0b01111111, // Row 5
  0b11111110, 0b01111111, // Row 6
  0b11111100, 0b00111111, // Row 7
  0b11111000, 0b00011111, // Row 8
  0b11110000, 0b00001111, // Row 9
  0b11100000, 0b00000111, // Row 10
  0b11000000, 0b00000011, // Row 11
  0b10000000, 0b00000001, // Row 12
  0b00000000, 0b00000000, // Row 13
  0b00000000, 0b00000000, // Row 14
  0b00000000, 0b00000000, // Row 15
  0b00000000, 0b00000000  // Row 16

};

void setup() {
  Wire.begin(2, 3); // Inisialisasi I2C dengan pin SDA=2, SCL=3
  Serial.begin(115200);
  delay(500);

  // Initialize OLED display
  display.init();
  display.setFont(ArialMT_Plain_16);
  display.flipScreenVertically(); // Rotate display 180 degrees

  // Initialize MAX30105 sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println(F("MAX30102 tidak ditemukan"));
    while (1);
  }

  // Sensor configuration
  particleSensor.setup(60, 4, 2, 100, 411, 4096); // LED pulse width, sample rate, LED current
}

void loop() {
  // Read temperature and calibrate
  float temperature = particleSensor.readTemperature();
  float calibratedTemperature = temperature - 5;

  // Collect heart rate and SpO2 data
  bufferLength = 100; // Data length for calculation
  for (byte i = 0; i < bufferLength; i++) {
    while (particleSensor.available() == false) {
      particleSensor.check();
    }
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();
  }

  // Calculate heart rate and SpO2
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  // Display data on OLED
  display.clear();

  // Display the heart icon at (0,0)
  display.drawXbm(0, 0, 16, 16, (const char*)heart_icon); // Cast to const char*

  // Display heart rate next to the heart icon
  display.drawString(20, 0, String(heartRate) + " bpm");

  // Display SpO2 and calibrated temperature
  display.drawString(0, 20, "SpO2: " + String(spo2) + "%");
  display.drawString(0, 40, "Temp: " + String(calibratedTemperature, 1) + " C");

  display.display();

  delay(1000); // Update every second
}